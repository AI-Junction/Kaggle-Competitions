# -*- coding: utf-8 -*-
"""
Created on Sun Feb 18 15:48:10 2018

@author: echtpar
"""
import os as os
import matplotlib.pyplot as plt

import ecallen
from ecallen import images as ecimg

# select an example SST-IRES-Cre data set
section_data_set_id = 167643437
# specify a location to save the images (optional)
data_dir = os.curdir
CW_DIR = os.getcwd()

ecallendir = "167643437_raw_images"
images_dir = os.path.join(CW_DIR, ecallendir)
print(images_dir)

# download all the images (this takes a long time)
#ecimg.save_all_section_images(section_data_set_id, data_dir)

# display the file names that were auto-generated by ecallen
#names = os.listdir(data_dir)
#print(names[1])

# display the file names that were auto-generated by ecallen
names = os.listdir(images_dir)


print(names[0])
#datasetID_167643437_imageID_167643439.jpg

functions = [item for item in dir(ecimg) if item[0:1] is not "_"]
print(functions)

import sklearn
#functions = [item for item in dir(sklearn.neighbors) if item[0:1] is not "_"]
#print(functions)
#ecimg.retrieve_file_over_http("http://api.brain-map.org/api/v2/section_image_download/159120103_raw_images/datasetID_159120103_imageID_159120159.jpg")

""" Display a single image """
from skimage.io import imread
import glob
# load the saved file
img_path = os.path.join(images_dir, "*30.jpg")   # data_dir + '/datasetID_167643437_imageID_167643532.jpg'
print(img_path)
img_name = glob.glob (img_path)
print(img_name)
img = imread(", ".join(img_name))
print(img.shape)

# select a sub-region of the image
small_img = img[650:2975, 10423:12130, :]

# plot the whole image and a close-up of the neocortex
fig = plt.figure(figsize = (8,8))
ax1 = fig.add_subplot(1,2,1)
ax1.imshow(img)
ax1.set_aspect('equal')
ax2 = fig.add_subplot(1,2,2)
ax2.imshow(small_img)
ax2.set_aspect('equal')
plt.show()

""" Use ecallen.images to get imaging metadata """
ecimg.get_imaging_params(section_data_set_id)

""" Plot each color channel individually """
import numpy as np
fig = plt.figure()
for i_plt, title in enumerate(['Somatostatin', 'tdTomato', 'DAPI']):
    ax = fig.add_subplot(1,3,i_plt+1)
    plt_img = np.zeros_like(small_img)
    plt_img[:,:,i_plt] = small_img[:,:,i_plt]
    ax.imshow(plt_img, interpolation='Nearest')
    ax.set_title(title)
plt.show()

'''
for i, label in enumerate(['a','b','c','d','e']):
    print(i, label)
'''


""" Merge the channels that contain redundant information """
# merge the Red and Green channels using maximum projection
small_img_sst_only = np.max(small_img[:,:,0:1], axis=2)
# plot the monochrome image
print(small_img.shape)
print(small_img_sst_only.shape)

fig = plt.figure()
ax = fig.add_subplot(1,1,1)
ax.imshow(small_img_sst_only, cmap='gray', interpolation='Nearest')
ax.set_title('Max projection of SST and tdTomato channels')
plt.show()


""" Derive a threshold for neuron segmentation """
from skimage import filters as skfilt
thresholds = {
            "thresh_yen": skfilt.threshold_yen(small_img_sst_only),
            "thresh_otsu": skfilt.threshold_otsu(small_img_sst_only),
            "thresh_li": skfilt.threshold_li(small_img_sst_only),
            "thresh_iso": skfilt.threshold_isodata(small_img_sst_only)
            }
fig = plt.figure()
for i_plt, thresh_type in enumerate(thresholds.keys()):
    thresh_val = thresholds[thresh_type]
    ax1 = fig.add_subplot(2, 2, i_plt+1)
    ax1.imshow(small_img_sst_only>thresh_val, interpolation='nearest', cmap='gray')
    ax1.set_title(thresh_type + ": {}".format(np.round(thresholds[thresh_type])))
plt.show()


small_ish_img_inverted = small_img_sst_only

# a brute-force way to remove the mode at the low end
cutoff_value = 70
small_ish_img_inverted[small_ish_img_inverted>cutoff_value] = cutoff_value
thresholds = {
            "thresh_yen": skfilt.threshold_yen(small_ish_img_inverted),
            "thresh_otsu": skfilt.threshold_otsu(small_ish_img_inverted),
            "thresh_li": skfilt.threshold_li(small_ish_img_inverted),
            "thresh_iso": skfilt.threshold_isodata(small_ish_img_inverted)
            }

            
""" Create a label matrix from a binary image """
from skimage.measure import label
from skimage.measure import regionprops

# Create binary image, apply Otsu's threshold
threshold = skfilt.threshold_otsu(small_img_sst_only)
binary_img = small_img_sst_only > threshold

# label neurons with an integer. Each neuron gets a unique integer
label_image = label(binary_img)
#print(label_image)


# extract various metrics from each of the labeled regions
rprops = regionprops(label_image)

# print all the available metrics extracted by regionprops
metrics = [item for item in dir(rprops[0]) if item[0:1] is not "_"]
print("Metrics that are quantified by regionprops:")
metrics            



""" Plot the label matrix as an image """
from skimage.color import label2rgb
binary_img_with_labels = label2rgb(label_image,
                            image=small_img_sst_only,
                            alpha=0.7,
                            bg_label=0,
                            bg_color=(0, 0, 0),
                            image_alpha=1,
                            kind='overlay'
                            )
fig = plt.figure()
ax = fig.add_subplot(1,1,1)
ax.imshow(binary_img_with_labels, interpolation='Nearest', origin='upper')
ax.set_title('Label matrix')
plt.show()


""" Extract the (X,Y) coordinates for each neuron """
# grab the X and Y pixels at the center of each labeled region
cell_x_pix = [roi['centroid'][1] for roi in rprops if roi['area'] > 20]
cell_y_pix = [roi['centroid'][0] for roi in rprops if roi['area'] > 20]
# plot the brain image to verify the (X,Y) locations
fig = plt.figure(figsize=(10, 10))
ax = fig.add_subplot(1,1,1)
ax.imshow(small_img_sst_only,
            cmap='gray',
            interpolation='Nearest',
            origin='upper'
            )
ax.plot(cell_x_pix, cell_y_pix, 'r.')
ax.set_title('Centroids of neurons from ISH image', fontsize=14)
